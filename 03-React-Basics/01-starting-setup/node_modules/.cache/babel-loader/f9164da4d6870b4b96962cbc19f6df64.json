{"ast":null,"code":"var _jsxFileName = \"/Users/jinctmac/code/JinCTMac/2021-react-course/03-React-Basics/01-starting-setup/src/components/NewExpense/expense_form.jsx\",\n    _s = $RefreshSig$();\n\nimport './expense_form.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // we store the useState variable as an empty string ''\n  // because the input element always returns a string\n  // even if its a number, it will be returned as a string to be set equal to the value\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); // or we can use a single state like so\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // });\n\n  const titleChangeHandler = event => {\n    // to be executed when the title input changes\n    // remember we just point at this function in the input field, without ()\n    setEnteredTitle(event.currentTarget.value); // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredTitle: event.currentTarget.value})\n    // setUserInput((prevState) => {\n    //   return (...prevState, enteredTitle: event.currentTarget.value);\n    // })\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.currentTarget.value); // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredAmount: event.currentTarget.value})\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.currentTarget.value); // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredDate: event.currentTarget.value})\n  };\n\n  const submitHandler = event => {\n    // add event.preventDefault() to stop the page reloading\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      // we make a new Date object and pass in the enteredDate to parse into a date\n      date: new Date(enteredDate)\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    action: \"\",\n    onChange: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          steps: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/jinctmac/code/JinCTMac/2021-react-course/03-React-Basics/01-starting-setup/src/components/NewExpense/expense_form.jsx"],"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","currentTarget","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAExB;AACA;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAPwB,CASxB;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMQ,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACA;AACAN,IAAAA,eAAe,CAACM,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAf,CAHoC,CAIpC;AACA;AACA;AACA;AACA;AACD,GATD;;AAWA,QAAMC,mBAAmB,GAAIH,KAAD,IAAW;AACrCJ,IAAAA,gBAAgB,CAACI,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAhB,CADqC,CAErC;AACA;AACD,GAJD;;AAMA,QAAME,iBAAiB,GAAIJ,KAAD,IAAW;AACnCF,IAAAA,cAAc,CAACE,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAAd,CADmC,CAEnC;AACA;AACD,GAJD;;AAMA,QAAMG,aAAa,GAAIL,KAAD,IAAW;AAC/B;AACAA,IAAAA,KAAK,CAACM,cAAN;AAEA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAEf,YADW;AAElBgB,MAAAA,MAAM,EAAEd,aAFU;AAGlB;AACAe,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASd,WAAT;AAJY,KAApB;AAMD,GAVD;;AAYA,sBACE;AAAM,IAAA,MAAM,EAAC,EAAb;AAAgB,IAAA,QAAQ,EAAEQ,aAA1B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEN;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,GAAG,EAAC,MAAzB;AAAgC,UAAA,KAAK,EAAC,MAAtC;AAA6C,UAAA,QAAQ,EAAEI;AAAvD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eASE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,GAAG,EAAC,YAAvB;AAAoC,UAAA,GAAG,EAAC,YAAxC;AAAqD,UAAA,QAAQ,EAAEC;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxED;;GAAMZ,W;;KAAAA,W;AA0EN,eAAeA,WAAf","sourcesContent":["import './expense_form.css';\nimport React, { useState } from 'react';\n\nconst ExpenseForm = () => {\n\n  // we store the useState variable as an empty string ''\n  // because the input element always returns a string\n  // even if its a number, it will be returned as a string to be set equal to the value\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  // or we can use a single state like so\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // });\n\n  const titleChangeHandler = (event) => {\n    // to be executed when the title input changes\n    // remember we just point at this function in the input field, without ()\n    setEnteredTitle(event.currentTarget.value);\n    // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredTitle: event.currentTarget.value})\n    // setUserInput((prevState) => {\n    //   return (...prevState, enteredTitle: event.currentTarget.value);\n    // })\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.currentTarget.value);\n    // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredAmount: event.currentTarget.value})\n  }\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.currentTarget.value);\n    // instead of using 3 separate states, we could use the single setUserInput state and add to it like so with a new object to replace the old one\n    // setUserInput({...userInput, enteredDate: event.currentTarget.value})\n  }\n\n  const submitHandler = (event) => {\n    // add event.preventDefault() to stop the page reloading\n    event.preventDefault();\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      // we make a new Date object and pass in the enteredDate to parse into a date\n      date: new Date(enteredDate)\n    }\n  }\n\n  return (\n    <form action=\"\" onChange={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler}/>\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input type=\"number\" min=\"0.01\" steps=\"0.01\" onChange={amountChangeHandler}/>\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add expense</button>\n      </div>\n    </form>\n  )\n}\n\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}